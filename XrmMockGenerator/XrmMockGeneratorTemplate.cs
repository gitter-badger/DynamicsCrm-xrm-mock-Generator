// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Yagasoft.XrmMockGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using System.IO;
    using Yagasoft.XrmMockGenerator.Model;
    using Yagasoft.XrmMockGenerator.Model.Control;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class XrmMockGeneratorTemplate : XrmMockGeneratorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("import { AttributeMock, IAttributeComponents, StringControlMock, IEntityComponent" +
                    "s, EntityMock, ItemCollectionMock, IUiComponents, UiMock, FormSelectorMock, Form" +
                    "ItemMock, IStringControlComponents, ClientContextMock, ContextMock, EventContext" +
                    "Mock, UserSettingsMock, IGridControlComponents, StepMock, ProcessMock, StageMock" +
                    ", ProcessManagerMock, IContextComponents, ControlMock, OptionSetValueMock } from" +
                    " \"../../src/xrm-mock\";\r\nimport { IXrmGeneratorComponents, XrmMockGenerator } fro" +
                    "m \"../../src/xrm-mock-generator\";\r\nimport FormContext from \"../../src/xrm-mock-g" +
                    "enerator/formcontext\";\r\nimport Ui from \"../../src/xrm-mock-generator/ui\";\r\nconst" +
                    " sinon = require(\'sinon\');\r\n\r\n/**\r\n * Model generated by the \"xrm-mock Generator" +
                    "\" tool available in the XrmToolBox or as the NuGet package \"xrm-mock-Generator\"\r" +
                    "\n */\r\nexport namespace XrmModel\r\n{\r\n\tabstract class CrmEntityModel<TFormNames>\r\n" +
                    "\t{\r\n\t\tabstract entityName: string;\r\n\t\tabstract context: Context;\r\n\t\tabstract crm" +
                    "Attributes: CrmAttribute[];\r\n\t\tabstract forms: Form[];\r\n\t\tactiveForm: TFormNames" +
                    ";\r\n\t}\r\n\r\n\tinterface IHasId { id: string; }\r\n\tinterface IHasLabels { labels: Map<" +
                    "number, string>; }\r\n\tinterface ICanVisible { isVisible: boolean; }\r\n\tinterface I" +
                    "CanDisabled { isDisabled: boolean; }\r\n\r\n\tclass Form implements IHasId\r\n\t{\r\n\t\tid:" +
                    " string;\r\n\t\tname: string;\r\n\t\ttabs: Tab[];\r\n\r\n\t\tconstructor(obj: Form)\r\n\t\t{\r\n\t\t\tO" +
                    "bject.assign<Form, Form>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Tab implements IHasId, I" +
                    "HasLabels, ICanVisible\r\n\t{\r\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisV" +
                    "isible: boolean;\r\n\t\tsections: Section[];\r\n\r\n\t\tconstructor(obj: Tab)\r\n\t\t{\r\n\t\t\tObj" +
                    "ect.assign<Tab, Tab>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Section implements IHasId, I" +
                    "HasLabels, ICanVisible\r\n\t{\r\n\t\tid: string;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisV" +
                    "isible: boolean;\r\n\t\tcontrols: Control[];\r\n\r\n\t\tconstructor(obj: Section)\r\n\t\t{\r\n\t\t" +
                    "\tObject.assign<Section, Section>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass CrmAttribute\r\n\t{" +
                    "\r\n\t\tattributeType: string;\r\n\t\tname: string;\r\n\t\trequiredLevel: string;\r\n\t\tformat:" +
                    " string;\r\n\t\toptions: Map<number, Map<number, string>>;\r\n\r\n\t\tconstructor(obj: Crm" +
                    "Attribute)\r\n\t\t{\r\n\t\t\tObject.assign<CrmAttribute, CrmAttribute>(this, obj);\r\n\t\t}\r\n" +
                    "\t}\r\n\r\n\tabstract class Control implements IHasLabels, ICanVisible\r\n\t{\r\n\t\tname: st" +
                    "ring;\r\n\t\tlabels: Map<number, string>;\r\n\t\tisVisible: boolean;\r\n\r\n\t\tconstructor(ob" +
                    "j: Control)\r\n\t\t{\r\n\t\t\tObject.assign<Control, Control>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tcl" +
                    "ass FieldControl extends Control implements ICanDisabled\r\n\t{\r\n\t\tisDisabled: bool" +
                    "ean;\r\n\r\n\t\tconstructor(obj: FieldControl)\r\n\t\t{\r\n\t\t\tsuper(obj);\r\n\t\t\tObject.assign<" +
                    "FieldControl, FieldControl>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass GridControl extends C" +
                    "ontrol\r\n\t{\r\n\t\tconstructor(obj: GridControl)\r\n\t\t{\r\n\t\t\tsuper(obj);\r\n\t\t\tObject.assi" +
                    "gn<GridControl, GridControl>(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Context\r\n\t{ \r\n\t\tuser" +
                    "Id: string;\r\n\t\tusername: string;\r\n\t\tuserFullName: string;\r\n\t\tisGuidedHelpEnabled" +
                    ": boolean;\r\n\t\tuserLanguageCode: number;\r\n\t\ttimeZoneBias: number;\r\n\t\tuserRoles: s" +
                    "tring[];\r\n\t\torganisationUrl: string;\r\n\t\tisAutoSaveEnabled: boolean;\r\n\t\torgLangua" +
                    "geCode: number;\r\n\t\torganisationName: string;\r\n\t\tthemeName: string;\r\n\t\tcrmVersion" +
                    ": string;\r\n\r\n\t\tconstructor(obj: Context)\r\n\t\t{\r\n\t\t\tObject.assign<Context, Context" +
                    ">(this, obj);\r\n\t\t}\r\n\t}\r\n\r\n\texport class ContextParams\r\n\t{\r\n\t\tclient: Xrm.Client;" +
                    "\r\n\t\tclientState: Xrm.ClientState;\r\n\t\tuserSettings: UserSettingsMock;\r\n\t}\r\n\r\n\texp" +
                    "ort class ModelBuilder<TEntity extends CrmEntityModel<TEntity[\"activeForm\"]>>\r\n\t" +
                    "{\r\n\t\tprivate recordId: string;\r\n\t\tprivate entity: EntityMock;\r\n\t\tprivate context" +
                    ": ContextMock;\r\n\t\tprivate ui: Ui;\r\n\t\tprivate attributes: Xrm.Attributes.Attribut" +
                    "e[] = [];\r\n\t\tprivate form: Form;\r\n\r\n\t\tprivate formType: XrmEnum.FormType\r\n\t\tpriv" +
                    "ate isBuilt: boolean;\r\n\r\n\t\tconstructor(private rawModel: TEntity, recordId: stri" +
                    "ng = \"00000000-0000-0000-0000-000000000000\")\r\n\t\t{\r\n\t\t\tthis.recordId = recordId;\r" +
                    "\n\t\t\tthis.form = this.rawModel.forms.find(form => true);\r\n\t\t}\r\n\r\n\t\tselectForm(for" +
                    "mName: TEntity[\"activeForm\"])\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Er" +
                    "ror(\"Model already built.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.form = this.rawModel.forms.find(fo" +
                    "rm => form.name === formName);\r\n\t\t}\r\n\r\n\t\tbuildContext(parameters?: ContextMock |" +
                    " ContextParams)\r\n\t\t{\r\n\t\t\tif (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model alr" +
                    "eady built.\");\r\n\t\t\t}\r\n\r\n\t\t\tconst rawContext = this.rawModel.context;\r\n\r\n\t\t\tif (p" +
                    "arameters == null)\r\n\t\t\t{\r\n\t\t\t\tthis.context = new ContextMock(<IContextComponents" +
                    ">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclientContext: new ClientContextMock(\"Web\", \"Online\"),\r\n\t\t\t\t\t\tu" +
                    "serSettings: new UserSettingsMock(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tisGuidedHelpEnabled: rawCo" +
                    "ntext.isGuidedHelpEnabled,\r\n\t\t\t\t\t\t\t\tisHighContrastEnabled: false,\r\n\t\t\t\t\t\t\t\tisRTL" +
                    ": false,\r\n\t\t\t\t\t\t\t\tuserId: rawContext.userId,\r\n\t\t\t\t\t\t\t\tuserName: rawContext.usern" +
                    "ame,\r\n\t\t\t\t\t\t\t\tlanguageId: rawContext.userLanguageCode,\r\n\t\t\t\t\t\t\t\tsecurityRoles: r" +
                    "awContext.userRoles\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tclientUrl: rawContext.organisationUrl,\r\n\t" +
                    "\t\t\t\t\tcurrentTheme: rawContext.themeName,\r\n\t\t\t\t\t\tisAutoSaveEnabled: rawContext.is" +
                    "AutoSaveEnabled,\r\n\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\r\n\t\t\t\t\t\torgUniqueNam" +
                    "e: rawContext.organisationName,\r\n\t\t\t\t\t\ttimeZoneOffset: rawContext.timeZoneBias,\r" +
                    "\n\t\t\t\t\t\tuserId: rawContext.userId,\r\n\t\t\t\t\t\tuserLcid: rawContext.userLanguageCode,\r" +
                    "\n\t\t\t\t\t\tuserName: rawContext.userFullName,\r\n\t\t\t\t\t\tuserRoles: rawContext.userRoles" +
                    ",\r\n\t\t\t\t\t\tversion: rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if (parameters " +
                    "instanceof ContextMock)\r\n\t\t\t{\r\n\t\t\t\tthis.context = parameters;\r\n\t\t\t}\r\n\t\t\telse if " +
                    "(parameters instanceof ContextParams)\r\n\t\t\t{\r\n\t\t\t\tparameters = <ContextParams>par" +
                    "ameters;\r\n\r\n\t\t\t\tthis.context = new ContextMock(<IContextComponents>\r\n\t\t\t\t\t{\r\n\t\t\t" +
                    "\t\t\tclientContext: new ClientContextMock(parameters.client, parameters.clientStat" +
                    "e),\r\n\t\t\t\t\t\tuserSettings: parameters.userSettings,\r\n\t\t\t\t\t\tclientUrl: rawContext.o" +
                    "rganisationUrl,\r\n\t\t\t\t\t\tcurrentTheme: rawContext.themeName,\r\n\t\t\t\t\t\tisAutoSaveEnab" +
                    "led: rawContext.isAutoSaveEnabled,\r\n\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\r\n" +
                    "\t\t\t\t\t\torgUniqueName: rawContext.organisationName,\r\n\t\t\t\t\t\ttimeZoneOffset: rawCont" +
                    "ext.timeZoneBias,\r\n\t\t\t\t\t\tuserId: parameters.userSettings.userId,\r\n\t\t\t\t\t\tuserLcid" +
                    ": parameters.userSettings.languageId,\r\n\t\t\t\t\t\tuserName: parameters.userSettings.u" +
                    "serName,\r\n\t\t\t\t\t\tuserRoles: parameters.userSettings.securityRoles,\r\n\t\t\t\t\t\tversion" +
                    ": rawContext.crmVersion\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuildModel(): void\r\n\t\t{\r\n\t\t\tif" +
                    " (this.isBuilt)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"Model already built.\");\r\n\t\t\t}\r\n\r\n\t\t\t" +
                    "this.buildAttributes();\r\n\t\t\tthis.buildEntity();\r\n\t\t\tthis.buildUi();\r\n\r\n\t\t\tif (th" +
                    "is.context == null)\r\n\t\t\t{\r\n\t\t\t\tthis.buildContext();\r\n\t\t\t}\r\n\r\n\t\t\tXrmMockGenerator" +
                    ".initialise(<IXrmGeneratorComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tentity: this.entity,\r\n\t\t\t\t\tui" +
                    ": this.ui,\r\n\t\t\t\t\tcontext: this.context,\r\n\t\t\t\t\tprocess: null\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\tth" +
                    "is.buildTabs();\r\n\t\t}\r\n\r\n\t\tprivate buildAttributes(): void\r\n\t\t{\r\n\t\t\tfor (const at" +
                    "tribute of this.rawModel.crmAttributes)\r\n\t\t\t{\r\n\t\t\t\tthis.attributes.push(\r\n\t\t\t\t\tn" +
                    "ew AttributeMock(<IAttributeComponents<StringControlMock, string>>\r\n\t\t\t\t\t\t{\r\n\t\t\t" +
                    "\t\t\t\tname: attribute.name,\r\n\t\t\t\t\t\t\trequiredLevel: attribute.requiredLevel\r\n\t\t\t\t\t\t" +
                    "}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate buildEntity(): void\r\n\t\t{\r\n\t\t\tthis.entity = new Enti" +
                    "tyMock(<IEntityComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tentityName: `${this.rawModel.entityName}" +
                    "`,\r\n\t\t\t\t\tid: `{${this.recordId}}`,\r\n\t\t\t\t\tattributes: new ItemCollectionMock<Xrm." +
                    "Attributes.Attribute>(this.attributes)\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildUi(): voi" +
                    "d\r\n\t\t{\r\n\t\t\tthis.ui = new UiMock(<IUiComponents>\r\n\t\t\t\t{\r\n\t\t\t\t\tformSelector: new F" +
                    "ormSelectorMock(new ItemCollectionMock<FormItemMock>(\r\n\t\t\t\t\t\tthis.rawModel.forms" +
                    ".map(form =>\r\n\t\t\t\t\t\t\tnew FormItemMock(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcurrentItem: form.id" +
                    " === this.form.id,\r\n\t\t\t\t\t\t\t\t\tformType: this.formType,\r\n\t\t\t\t\t\t\t\t\tid: form.id,\r\n\t\t" +
                    "\t\t\t\t\t\t\tlabel: form.name,\r\n\t\t\t\t\t\t\t\t}))))\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tprivate buildTabs(): " +
                    "void\r\n\t\t{\r\n\t\t\tfor (const tab of this.form.tabs) \r\n\t\t\t{\r\n\t\t\t\tXrmMockGenerator.Tab" +
                    ".createTab(tab.id, tab.labels[this.context.userLcid], tab.isVisible, \"collapsed\"" +
                    ", null,\r\n\t\t\t\t\tnew ItemCollectionMock<Xrm.Controls.Section>(this.buildSections(ta" +
                    "b)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate buildSections(tab: Tab): Xrm.Controls.Section[]\r\n\t" +
                    "\t{\r\n\t\t\tconst sections: Xrm.Controls.Section[] = [];\r\n\r\n\t\t\tfor (const section of " +
                    "tab.sections)\r\n\t\t\t{\r\n\t\t\t\tsections.push(\r\n\t\t\t\t\tXrmMockGenerator.Section.createSec" +
                    "tion(section.id, section.labels[this.context.userLcid], section.isVisible, null," +
                    "\r\n\t\t\t\t\t\tnew ItemCollectionMock<Xrm.Controls.Control>(this.buildControls(section)" +
                    ")));\r\n\t\t\t}\r\n\r\n\t\t\treturn sections;\r\n\t\t}\r\n\r\n\t\tprivate buildControls(section: Secti" +
                    "on): Xrm.Controls.Control[]\r\n\t\t{\r\n\t\t\tconst controls: Xrm.Controls.Control[] = []" +
                    ";\r\n\r\n\t\t\tfor (const control of section.controls)\r\n\t\t\t{\r\n\t\t\t\tconst controlParams: " +
                    "any = { name: control.name, label: control.labels[this.context.userLcid], visibl" +
                    "e: control.isVisible };\r\n\t\t\t\tlet controlMock: ControlMock;\r\n\r\n\t\t\t\tif (control in" +
                    "stanceof GridControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontrolParams.entityName = this.entity;\r\n\t\t\t\t" +
                    "\tcontrolMock = XrmMockGenerator.Control.createGrid(controlParams);\r\n\t\t\t\t}\r\n\t\t\t\te" +
                    "lse if (control instanceof FieldControl)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst attribute = this.att" +
                    "ributes.find(attribute => attribute.getName() === control.name);\r\n\r\n            " +
                    "        const missingAttributeMessage = `WARNING: Skipped adding control \'${cont" +
                    "rol.name}\' due to missing attribute.`;\r\n\r\n                    if (!attribute)\r\n " +
                    "                   {\r\n                        console.log(missingAttributeMessag" +
                    "e);\r\n                        continue;\r\n                    }\r\n\r\n\t\t\t\t\tcontrolPar" +
                    "ams.attribute = attribute;\r\n\r\n\t\t\t\t\tconst fieldcontrol = <FieldControl>control;\r\n" +
                    "\t\t\t\t\tcontrolParams.disabled = fieldcontrol.isDisabled\r\n\r\n\t\t\t\t\tconst rawAttribute" +
                    " = this.rawModel.crmAttributes.find(attribute => attribute.name === control.name" +
                    ");\r\n\r\n                    if (!rawAttribute)\r\n                    {\r\n           " +
                    "             console.log(missingAttributeMessage);\r\n                        cont" +
                    "inue;\r\n                    }\r\n\r\n\t\t\t\t\tconst attributeType = rawAttribute.attribut" +
                    "eType;\r\n\r\n\t\t\t\t\tswitch (attributeType)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"optionset\":\r\n\t\t\t\t\t\t\tc" +
                    "onst optionsMock: OptionSetValueMock[] = []\r\n\t\t\t\t\t\t\trawAttribute.options.forEach" +
                    "((value, key) => { optionsMock.push(new OptionSetValueMock(value[this.context.us" +
                    "erLcid], key)) });\r\n\t\t\t\t\t\t\tcontrolParams.options = optionsMock;\r\n               " +
                    "             controlMock = XrmMockGenerator.Control.createOptionSet(controlParam" +
                    "s);\r\n                            break;\r\n\t\t\t\t\t\tcase \"datetime\":\r\n\t\t\t\t\t\t\tcontrolP" +
                    "arams.showTime = attribute.getFormat() === \"datetime\";\r\n                        " +
                    "    controlMock = XrmMockGenerator.Control.createDate(controlParams);\r\n         " +
                    "                   break;\r\n\t\t\t\t\t\tcase \"integer\":\r\n\t\t\t\t\t\tcase \"double\":\r\n\t\t\t\t\t\tca" +
                    "se \"decimal\":\r\n\t\t\t\t\t\tcase \"money\":\r\n                            controlMock = Xr" +
                    "mMockGenerator.Control.createNumber(controlParams);\r\n                           " +
                    " break;\r\n\t\t\t\t\t\tcase \"lookup\":\r\n                            controlMock = XrmMock" +
                    "Generator.Control.createLookup(controlParams);\r\n                            brea" +
                    "k;\r\n\t\t\t\t\t\tcase \"string\":\r\n\t\t\t\t\t\tcase \"memo\":\r\n                            contro" +
                    "lMock = XrmMockGenerator.Control.createString(controlParams);\r\n                 " +
                    "           break;\r\n\t\t\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\t\tdefault:\r\n                      " +
                    "      console.log(`WARNING: Adding control \'${control.name}\' as String control d" +
                    "ue to unsupported \'${attributeType}\' type.`);\r\n                            contr" +
                    "olMock = XrmMockGenerator.Control.createString(controlParams);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r" +
                    "\n\t\t\t\tcontrols.push(controlMock);\r\n\t\t\t}\r\n\r\n\t\t\treturn controls;\r\n\t\t}\r\n\t}\r\n\t");
            
            #line 409 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 
		foreach (var model in models)
		{
	
            
            #line default
            #line hidden
            this.Write(" \r\n\ttype ");
            
            #line 413 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms =\r\n\t\t");
            
            #line 414 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 foreach (var form in model.Forms) { 
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 414 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\" |  ");
            
            #line 414 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("null;\r\n\r\n\texport class ");
            
            #line 416 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write(" extends CrmEntityModel<");
            
            #line 416 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms>\r\n\t{\r\n\t\tentityName = \"");
            
            #line 418 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tcontext = new Context(<Context>\r\n\t\t\t{\r\n\t\t\t\tuserId: \"");
            
            #line 421 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserId.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tusername: ");
            
            #line 422 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.Username))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserFullName: ");
            
            #line 423 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.UserFullName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tisGuidedHelpEnabled: ");
            
            #line 424 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsGuidedHelpEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserLanguageCode: ");
            
            #line 425 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\ttimeZoneBias: ");
            
            #line 426 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.TimeZoneBias.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tuserRoles:\r\n\t\t\t\t\t[\r\n\t\t\t");
            
            #line 429 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var role in model.Context.UserRoles)
				{
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\"");
            
            #line 432 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(role.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t");
            
            #line 433 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("\t\t],\r\n\t\t\t\torganisationUrl: \"");
            
            #line 436 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationUrl)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tisAutoSaveEnabled: ");
            
            #line 437 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsAutoSaveEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torgLanguageCode: ");
            
            #line 438 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrgLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\torganisationName: \"");
            
            #line 439 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationName)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\tthemeName: ");
            
            #line 440 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.ThemeName))));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\tcrmVersion: \"");
            
            #line 441 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.CrmVersion)));
            
            #line default
            #line hidden
            this.Write("\"\r\n\t\t\t});\r\n\t\tcrmAttributes =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 445 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var attribute in model.CrmAttributes)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew CrmAttribute(<CrmAttribute>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tattributeType: \"");
            
            #line 450 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.AttributeType)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 450 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Name)));
            
            #line default
            #line hidden
            this.Write("\", requiredLevel: \"");
            
            #line 450 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.RequiredLevel, "none")));
            
            #line default
            #line hidden
            this.Write("\", format: \"");
            
            #line 450 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Format)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\toptions: new Map(\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 453 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					if (attribute.Options != null) {
					foreach (var option in attribute.Options)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t[");
            
            #line 457 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(option.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\tnew Map(\r\n\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 460 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in option.Value)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t[");
            
            #line 463 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(label.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 463 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("]\r\n\t\t\t\t\t");
            
            #line 464 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t");
            
            #line 468 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t])\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 473 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tforms =\r\n\t\t\t[\r\n\t\t\t");
            
            #line 478 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				foreach (var form in model.Forms)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew Form(<Form>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"");
            
            #line 483 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Id)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 483 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\ttabs:\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t");
            
            #line 486 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					foreach (var tab in form.Tabs)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tnew Tab(<Tab>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 491 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 491 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t");
            
            #line 494 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						foreach (var label in tab.Labels)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t[");
            
            #line 497 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 497 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t");
            
            #line 498 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\tsections:\r\n\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t");
            
            #line 503 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							foreach (var section in tab.Sections)
							{
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tnew Section(<Section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 508 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 508 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t");
            
            #line 511 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								foreach (var label in section.Labels)
								{
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t[");
            
            #line 514 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 514 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t");
            
            #line 515 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

								}
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t");
            
            #line 520 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<FieldControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew FieldControl(<FieldControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tna" +
                    "me: \"");
            
            #line 525 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 525 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(", isDisabled: ");
            
            #line 525 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsDisabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 528 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 531 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 531 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 533 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 536 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            
            #line 538 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<GridControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew GridControl(<GridControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname" +
                    ": \"");
            
            #line 543 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 543 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 546 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 549 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 549 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 551 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t");
            
            #line 554 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t");
            
            #line 558 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

							}
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t");
            
            #line 562 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t");
            
            #line 566 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\r\n\t}\r\n");
            
            #line 570 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 573 "D:\Drive\Git\DynamicsCrm-xrm-mock-Generator\XrmMockGenerator\XrmMockGeneratorTemplate.tt"

    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	public string CheckString(string value, string defaultValue = "null")
	{
		return value ?? defaultValue;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class XrmMockGeneratorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
